<?phpclass CartController extends Base_Controller_Api{    public  function addAction()	{		$arg[ 'ticket_id' ] = null == ( $this->body[ 'ticket_id' ] )? Lang_Msg::error( 'ERROR_ORDER_4' ): intval( $this->body[ 'ticket_id' ] );		$arg[ 'ticket_name' ] = null == ( $this->body[ 'ticket_name' ] )? Lang_Msg::error( 'ERROR_ORDER_1' ):  $this->body[ 'ticket_name' ] ;		$arg[ 'date' ]	=  null == ( $this->body[ 'date' ] )? Lang_Msg::error( 'ERROR_ORDER_5' ): intval( $this->body[ 'date' ] );		//$arg[ 'payment' ] =  null == ( $this->body[ 'payment' ] )? Lang_Msg::error( 'ERROR_ORDER_6' ):  $this->body[ 'payment' ] ;		$arg[ 'price_type' ]	= null == ( $this->body[ 'price_type' ] )? Lang_Msg::error( 'ERROR_ORDER_7' ):  $this->body[ 'price_type' ] ;		$arg[ 'price' ] =	null == ( $this->body[ 'price' ] )? Lang_Msg::error( 'ERROR_ORDER_8' ):  $this->body[ 'price' ] ;		//$arg[ 'num' ]	= null == ( $this->body[ 'price' ] )? Lang_Msg::error( 'ERROR_ORDER_9' ):  $this->body[ 'num' ] ;		$arg[ 'type' ]  =0;		if( $this->body[ 'type' ] ) $arg[ 'type' ] = intval( $this->body[ 'type' ] );		$arg[ 'user_id' ] = null == ( $this->body[ 'user_id' ] )? Lang_Msg::error( 'ERROR_ORDER_12' ):  $this->body[ 'user_id' ] ;        $list= trim($this->body[ 'list' ]) ;        $lists = json_decode( $list,TRUE );        if(empty($lists)) {            Tools::lsJson(false,'取票人信息不能为空');        }        $productInfo = TicketTemplateModel::model()->getInfo($arg[ 'ticket_id' ],$arg[ 'price_type' ],0,'',0,0,1);        !$productInfo && Lang_Msg::error('ERROR_TKT_2');        isset($productInfo['code']) && $productInfo['code']=='fail' && Lang_Msg::error($productInfo['message']);        $data = array();		$i =0;		// print_r(  json_encode( array(  array('name' => 'names', 'phone' => '150000000000', 'ard' =>'e324dafasdfadsf'))));		foreach( $lists as $key => $value )		{				if(empty($value[ 'name'])) {                Tools::lsJson(false,'取票人姓名不能为空');            } else if(empty($value[ 'num'])) {                Tools::lsJson(false,'预定张数不能小于1');            } else if(empty($value[ 'phone'])) {                Tools::lsJson(false,'取票人手机号不能为空');            } else if(!Validate::isMobilePhone($value[ 'phone'])) {                Tools::lsJson(false,'取票人手机号格式错误');            } else if(!empty($value[ 'card']) && !Validate::isCard($value[ 'card'])) {                Tools::lsJson(false,'取票人身份证号无效');            }            $data[ $i ][ 'price' ] = $arg[ 'price' ];			$data[ $i ][ 'ticket_id' ] = $arg[ 'ticket_id' ];			$data[ $i ][ 'ticket_name' ] = $arg[ 'ticket_name' ];			$data[ $i ][ 'date' ]		 =  is_numeric( $arg[ 'date' ] )?  $arg[ 'date' ] : strtotime( $arg[ 'date'] );			//$data[ $i ][ 'payment' ] = $arg[ 'payment' ];			$data[ $i ][ 'price_type' ] = $arg[ 'price_type' ];			$data[ $i ][ 'num' ] = $value[ 'num' ];			$data[ $i ][ 'name' ] = $value[ 'name'] ;			$data[ $i ][ 'user_id' ] = $arg[ 'user_id' ];			$data[ $i ][ 'phone' ] = $value[ 'phone'];			$data[ $i ][ 'remark' ] ='';			$data[ $i ][ 'type' ] = $arg[ 'type' ];			if( isset( $this->body[ 'remark' ])) $data[ $i ][ 'remark'] = $this->body[ 'remark' ];			if( isset( $value['card'] )) $data[ $i ][ 'card'] = $value[ 'card'];            if(!empty($productInfo['need_idcard'])) {                $checkRes = OrderItemModel::model()->checkVisitors($value['visitors'],$productInfo['name'],$productInfo['need_idcard'],$value[ 'num' ]);                if(true === $checkRes) {                    $data[$i]['visitors'] = json_encode($value['visitors'],JSON_UNESCAPED_UNICODE);                }            }			$i++;		}		//提交		try {			CartModel::model()->begin();			foreach( $data as $key => $value )			{					$return = CartModel::model()->insert( $value );			}			CartModel::model()->commit();			Tools::lsJson('true','添加成功');				}		catch ( PDOException $err )    	{    		CartModel::model()->rollback();    		Tools::lsJson( '0', '添加失败');    	}	}		public  function deleteAction()	{			$id =  null == ( $this->body[ 'ids' ] ) ? Tools::lsJson( '0', '没有IDS参数'):  $this->body[ 'ids' ] ;		$ids = explode( ',', $id );		try 		{			CartModel::model()->begin();			foreach ( $ids as $d )			{					CartModel::model()->deleteById( $d );			}			CartModel::model()->commit();			Tools::lsJson('true','成功删除');		}		catch ( PDOException $err )    	{    		CartModel::model()->rollback();    		Tools::lsJson( '0', '删除失败');    	}	}		public function listsAction()	{		$arg[ 'user_id' ] = null == ( $this->body[ 'user_id' ] )? Lang_Msg::error( 'ERROR_ORDER_12' ): intval( $this->body[ 'user_id' ] );		if(isset($this->body['id'])) $arg['id|in'] = explode(',',$this->body['id']);        $return = CartModel::model()->getList( $arg );		foreach( $return as $key => $value )		{			$return[ $key ][ 'date' ] = date( 'Y-m-d', $value[ 'date'] );		}		Lang_Msg::output( $return );	}    /**     * 获取购物车数量     * author : yinjian     */    public function countAction()    {        $arg[ 'user_id' ] = null == ( $this->body[ 'user_id' ] )? Lang_Msg::error( 'ERROR_ORDER_12' ): intval( $this->body[ 'user_id' ] );        $count = reset(CartModel::model()->search($arg, 'count(*) as count'));        $this->count = $count['count'];        $this->pagenation();        // 数据        $data['pagination'] = array(            'count' => $this->count,            'current' => $this->current,            'items' => $this->items,            'total' => $this->total,        );        Tools::lsJson(true, 'ok', $data);    }		public  function updateAction()	{		$update = array();		$id = null == ( $this->body[ 'id' ] )? Lang_Msg::error( 'ERROR_ORDER_13' ): intval( $this->body[ 'id' ] );        $info = CartModel::model()->getById( array( 'id' => $id) );        if(empty($info)) {            Tools::lsJson(false,'更新失败,数据库中没有ID='.$id);        }		if( isset( $this->body['name']))    $update['name'] = $this->body[ 'name' ];		if( isset( $this->body['phone']))   $update['phone'] = $this->body[ 'phone' ];		if( isset( $this->body['date']))    $update['name'] = $this->body[ 'name' ];		if( isset( $this->body['num']))     $update['num'] = $this->body[ 'num' ];        else $update['num'] = $info['num'];        if( isset( $this->body['visitors']))$update['visitors'] = $this->body[ 'visitors' ];        $productInfo = TicketTemplateModel::model()->getInfo($info[ 'ticket_id' ],$info[ 'price_type' ],0,'',0,0,1);        !$productInfo && Lang_Msg::error('ERROR_TKT_2');        isset($productInfo['code']) && $productInfo['code']=='fail' && Lang_Msg::error($productInfo['message']);        if(!empty($productInfo['need_idcard'])) {            $update['visitors'] = empty($update['visitors']) ? $info['visitors']:$update['visitors'];            $update['visitors'] = json_decode($update['visitors'],true);            if(true === OrderItemModel::model()->checkVisitors($update['visitors'],$productInfo['name'],$productInfo['need_idcard'],$update['num'])) {                $update['visitors'] = json_encode($update['visitors'],JSON_UNESCAPED_UNICODE);            }        }        $return = CartModel::model()->update( $update,array( 'id' => $id ));        if( $return ) {            //Lang_Msg::output( Lang_Msg::error( 'ERROR_ORDER_10'));            Tools::lsJson( true, '更新成功');        } else {            //Lang_Msg::error( 'ERROR_ORDER_11');            Tools::lsJson( false, '更新失败');        }	}		public  function detailAction()	{   		$id = null == ( $this->body[ 'id' ] )? Lang_Msg::error( 'ERROR_ORDER_13' ): intval( $this->body[ 'id' ] );		$return = CartModel::model()->get( array( 'id' => $id ) );		$return[ 'date' ] = date( 'Y-m-d H:i:s', $return[ 'date'] );		Lang_Msg::output( $return );	}}